from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod
    def calculate_area(self):
        pass

class Rectangle(Shape):
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def calculate_area(self):
        return self.length * self.width

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    # def calculate_area(self):
    #     return 3.14 * self.radius**2

class BigCircle(Circle):
    def calculate_area(self):
        return 3.14 * self.radius**2 * 2

# Creating objects of concrete subclasses
rectangle = Rectangle(5, 3)
print(type(Circle)) #<class 'abc.ABCMeta'>
# circle = Circle(4) # can't create object of Abstact class
big_circle = BigCircle(6)

# Calling the calculate_area() method on objects
print(rectangle.calculate_area())  # Output: 15
# print(circle.calculate_area())  # Output: 50.24
print(big_circle.calculate_area())  # Output: 226.08
